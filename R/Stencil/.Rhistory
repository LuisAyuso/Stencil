plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_benchmark, "exec.time")
o4_only_200 <- o4_benchmark[o4_benchmark["input.size"]==200, ]
o4_only_200_noIT = o4_only_200[o4_only_200$algorithm != 'it', ]
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "context.switches")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "context.switches")
plot_input_size_vs_cores(o4_only_200_noIT, "page.faults")
plot_input_size_vs_cores(o4_only_200_noIT, "stalled.cycles.frontend")
plot_input_size_vs_cores(o4_only_200_noIT, "branch.misses")
plot_input_size_vs_cores(o4_only_200_noIT, "task.clock")
plot_input_size_vs_cores(o4_only_200_noIT, "stalled.cycles.backend")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";", quote="")
View(`o4_benchmark`)
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
plot_input_size_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
o4_benchmark <- o4_benchmark[o4_benchmark$input.size == 100,]
View(`o4_benchmark`)
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
plot_time_steps_vs_cores(o4_benchmark, "cache.misses")
plot_time_steps_vs_cores(o4_benchmark, "cpu.cycles
")
plot_time_steps_vs_cores(o4_benchmark, "branch.misses")
plot_time_steps_vs_cores(o4_benchmark, "stalled.cycles.frontend")
plot_time_steps_vs_cores(o4_benchmark, "stalled.cycles.backend")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
View(`o4_benchmark`)
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
View(`o4_benchmark`)
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
o4_only_size_100 <- o4_benchmark[o4_benchmark$input.size == 100, ]
o4_only_size_150 <- o4_benchmark[o4_benchmark$input.size == 150, ]
o4_only_size_200 <- o4_benchmark[o4_benchmark$input.size == 200, ]
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_only_size_100, "exec.time")
plot_time_steps_vs_cores(o4_only_size_150, "exec.time")
plot_time_steps_vs_cores(o4_only_size_200, "exec.time")
o4_only_time_50 <- o4_benchmark[o4_benchmark$time.steps == 50, ]
o4_only_time_100 <- o4_benchmark[o4_benchmark$time.steps == 100, ]
o4_only_time_150 <- o4_benchmark[o4_benchmark$time.steps == 150, ]
plot_input_size_vs_cores( o4_only_time_50, "exec.time")
plot_input_size_vs_cores( o4_only_time_100, "exec.time")
plot_input_size_vs_cores( o4_only_time_150, "exec.time")
plot_input_size_vs_cores( o4_only_time_150, "cache.misses")
icc_s100_t150 <- read.csv("~/code/stencil/icc_s100_t150", sep=";")
View(icc_s100_t150)
source("./plot_counters.R")
plot_algorithm_vs_cores(icc_s100_t150, "exec.time")
icc_s100_t150_no_it <- icc_s100_t150[icc_s100_t150$algorith != "it", ]
plot_algorithm_vs_cores(icc_s100_t150_no_it, "exec.time")
icc_s100_t150_2 <- read.csv("~/code/stencil/icc_s100_t150_2", sep=";")
View(icc_s100_t150_2)
icc_s100_t150_no_it <- icc_s100_t150_2[icc_s100_t150_2$algorith != "it", ]
plot_algorithm_vs_cores(icc_s100_t150_no_it_2, "exec.time")
plot_algorithm_vs_cores(icc_s100_t150_no_it, "exec.time")
source("./plot_counters.R")
icc_s100_t150 <- read.csv("~/code/stencil/icc_s100_t150", sep=";")
View(icc_s100_t150)
plot_algorithm_vs_cores(icc_s100_t150, "cache.misses")
plot_algorithm_vs_cores(icc_s100_t150, "exec.time")
a <- icc_s100_t150[icc_s100_t150$algorithm != 'it', ]
plot_algorithm_vs_cores(a, "exec.time")
gcc5_100_150 <- read.csv("~/code/stencil/gcc5_100_150", sep=";")
View(gcc5_100_150)
plot_algorithm_vs_cores(gcc5_100_150, "exec.time")
plot_algorithm_vs_cores(gcc5_100_150, "cache.misses")
gcc5_100_150 <- read.csv("~/code/stencil/gcc5_100_150", sep=";")
View(gcc5_100_150)
plot_algorithm_vs_cores(gcc5_100_150, "exec.time")
gcc5_rec_vs_inv <- gcc5_100_150[gcc5_100_150$algorithm != it,]
gcc5_rec_vs_inv <- gcc5_100_150[gcc5_100_150$algorithm != "it",]
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "cache.misses")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "stalled.cycles.frontend")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "stalled.cycles.backend")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "instructions")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
ddply(gcc5_rec_vs_inv,algorithm~num.cores,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
ddply(gcc5_rec_vs_inv,algorithm,num.cores,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
ddply(gcc5_rec_vs_inv,algorithm~num.cores~Kind,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
ddply(gcc5_rec_vs_inv,algorithm~num.cores~Kind,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
tmp <- ddply(gcc5_rec_vs_inv,algorithm~num.cores~Kind,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
tmp2 <-gcc5_100_150
tmp2 <-gcc5_rec_vs_inv
total <- merge(tmp, tmp2)
total
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot <- ggplot(total)
plot + geom_boxplot(aes_string(x="Kind", y=measure, fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x = algorithm, y = 10 ))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x = algorithm, y = 10 ))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x=Kind))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x=Kind, y=100))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x=Kind, y=10))
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
my_func(total, "omp", "cilk", 2, 1234)
test(total)
source("./plot_counters.R")
my_func(total, "omp", "cilk", 2, 1234)
total[total$Kind = 'omp']
total[total$Kind == 'omp']
View(total)
total[total$Kind == 'omp',]
source("./plot_counters.R")
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
dumm <- my_func(total, kind="omp", alg="cilk", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="cilk", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="cilk", numthreads = 2, exectime = 1234)
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
ddply?
ddply
?ddply
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
ddply(my_dataframe, Kind~algorithm~num.cores, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time), my_dataframe)
ddply(my_dataframe, Kind~algorithm~num.cores, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time), total)
ddply(my_dataframe, Kind~algorithm~num.cores, .fun = estimate,  Kind, algorithm, num.cores, exec.time, total)
ddply(total, Kind~algorithm~num.cores, .fun = estimate,  Kind, algorithm, num.cores, exec.time, total)
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time df=my_dataframe) ) )
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time df=total) ) )
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) ) )
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
source("./plot_counters.R")
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
source("./plot_counters.R")
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
test(total)
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
clear(a)
clean(a)
remove(a)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
sumarize_times(total)
sumarize_times(gcc5_100_150)
global_df
source("./plot_counters.R")
source("./plot_counters.R")
sumarize_times(gcc5_rec_vs_inv)
source("./plot_counters.R")
sumarize_times(gcc5_rec_vs_inv)
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
total <- sumarize_times(gcc5_rec_vs_inv)
plot <- ggplot(total)
plot +  geom_dotplot(aes(x=exec.time, y=num.cores))
total
plot +  geom_dotplot(aes(x=exec.time.mean, y=num.cores))
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ num.cores)
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ )
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ kind)
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ num.cores)
total <- sumarize_times(gcc5_rec_vs_inv)
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
gcc5_doub_400_100_noHT <- read.csv("~/code/stencil/gcc5_doub_400_100_noHT", sep=";")
View(gcc5_doub_400_100_noHT)
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
library("plyr")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
library("ggplot2", lib.loc="/usr/lib64/R/library")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
View(gcc5_doub_400_100_noHT)
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "cache.misses")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "stalled.cycles.backend")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "stalled.cycles.frontend")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "stalled.cycles.frontend")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "branch.misses")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "stalled.cycles.frontend")
in_socket <- gcc5_doub_400_100_noHT[gcc5_doub_400_100_noHT$num.cores<16, ]
plot_algorithm_vs_cores(in_socket, "exec.time")
of_socket <- gcc5_doub_400_100_noHT[gcc5_doub_400_100_noHT$num.cores >= 16, ]
plot_algorithm_vs_cores(of_socket, "exec.time")
View(of_socket)
of_socket <- gcc5_doub_400_100_noHT[gcc5_doub_400_100_noHT$num.cores > 8, ]
View(of_socket)
View(in_socket)
plot_algorithm_vs_cores(of_socket, "exec.time")
plot_algorithm_vs_cores(in_socket, "exec.time")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
library("ggplot2", lib.loc="/usr/lib64/R/library")
library("plyr", lib.loc="/usr/lib64/R/library")
plot_algorithm_vs_cores(gcc5_doub_400_100_noHT, "exec.time")
benchmarkSizes <- read.table("~/code/stencil/measures/benchmarkSizes.log", sep=";", quote="\"")
View(benchmarkSizes)
plot <- ggplot(benchmarkSizes)
cilk_rec <- benchmarkSizes[benchmarkSizes$V1 == 'cilk', ]
cilk_inv <- cilk_rec[cilk_rec$V1 == 'inv', ]
cilk_rec <- cilk_rec[cilk_rec$V1 == 'rec', ]
View(cilk_inv)
View(cilk_rec)
cilk_rec <- benchmarkSizes[benchmarkSizes$V1 == "cilk", ]
cilk_inv <- cilk_rec[cilk_rec$V2 == 'inv', ]
View(cilk_rec)
View(cilk_inv)
cilk_becnh <- benchmarkSizes[benchmarkSizes$V1 == "cilk", ]
cilk_bench <- benchmarkSizes[benchmarkSizes$V1 == "cilk", ]
plot <- ggplot(cilk_bench)
View(cilk_becnh)
View(cilk_bench)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V3 ~ V4)
cxx_bench <- benchmarkSizes[benchmarkSizes$V1 == "cxx", ]
omp_bench <- benchmarkSizes[benchmarkSizes$V1 == "omp", ]
View(cxx_bench)
plot <- ggplot(cxx_bench)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V3 ~ V4)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2, fill=V5 )) + facet_grid( V3 ~ V4)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V3 ~ V5)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V3 ~ V4)
plot <- ggplot(cilk_bench[cilk_bench$V3 == 100,)
plot <- ggplot(cilk_bench[cilk_bench$V3 == 100,])
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V3 ~ V4)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V5 ~ V5)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V5 ~ V3)
plot + geom_boxplot(aes(x = Vv3, y= V6, color=V2 )) + facet_grid( V5 ~ V3)
plot + geom_boxplot(aes(x = V3, y= V6, color=V2 )) + facet_grid( V5 ~ V3)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid( V5 ~ V3)
plot + geom_boxplot(aes(x = V5, y= V6 )) + facet_grid( V5 ~ V3)
plot + geom_boxplot(aes(x = V5, y= V6 ))
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 ))
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid(V3 ~ V4)
plot + geom_boxplot(aes(x = V5, y= V6, color=V2 )) + facet_grid(V4 ~ V3)
(aes(x = V5, y= V6, color=V2 )) + facet_grid(V4 ~ V3)
ddpy(cilk_bench, V1 ,V2 ,V3 ,V4, V5, sumarize, avg_time=avg(V6))
ddply(cilk_bench, V1, V2, V3, V4, V5, summarise, exec_mean=mean(V6))
ddply(cilk_bench, V1 ~ V2 ~ V3 ~ V4 ~ V5, summarise, exec_mean=mean(V6))
mean <- ddply(cilk_bench, V1 ~ V2 ~ V3 ~ V4 ~ V5, summarise, exec_mean=mean(V6))
plot <- ggplot(mean)
qplot(mean)
qplot(
mean)
p <- ggplot(mean, aes(x = V5, y=exec_mean), V1~ V2) + geom_point()
p
ggplot(mean, aes(x = V5, y=exec_mean)) + geom_point()
ggplot(mean, aes(x = V5, y=exec_mean)) + geom_point()
p <- ggplot(mean, aes(x = V5, y=exec_mean)) + geom_point()
p
p + facet_grid(V2 ~ V3)
p <- ggplot(mean, aes(x = V5, y=exec_mean)) + geom_point(color=V2)
p <- ggplot(mean, aes(x = V5, y=exec_mean, color=V2)) + geom_point()
p <- ggplot(mean, aes(x = V5, y=exec_mean)) + geom_point(color=V2)
p <- ggplot(mean, aes(x = V5, y=exec_mean, color=V2)) + geom_point()
p + facet_grid(V2 ~ V3)
p + facet_grid(V3 ~ V4)
p + facet_grid(V3 ~ V4) +  stat_smooth(method="lm", se=FALSE)
p <- ggplot(mean, aes(x = V5, y=exec_mean, color=V2)) + geom_point()
p + facet_grid(V3 ~ V4) +  stat_smooth(method="lm", se=FALSE)
View(mean)
p <- ggplot(mean, aes(x = V5, y=exec_mean, color=V2)) + geom_point()
plot< - ggplot(mean)
plot <- ggplot(mean)
c + stat_smooth(aes(x=V4, y=exec_mean, color=V2)) + facet_grid(V2 ~V5 )
c + stat_smooth(aes(x=V4, y=exec_mean)) + facet_grid(V2 ~V5 )
plot + stat_smooth(aes(x=V4, y=exec_mean)) + facet_grid(V2 ~V5 )
plot + stat_smooth(aes(x=V4, y=exec_mean, color=V2)) + facet_grid(V2 ~V5 )
plot + stat_smooth(aes(x=V4, y=exec_mean, color=V2)) + facet_grid(V3 ~V5 )
plot <- ggplot(cilk_bench)
plot + stat_smooth(aes(x=V4, y=exec_mean, color=V2)) + facet_grid(V3 ~V5 )
plot + stat_smooth(aes(x=V4, y=V6, color=V2)) + facet_grid(V3 ~V5 )
benchmarkSizes <- read.table("~/code/stencil/measures/benchmarkSizes.log", sep=";", quote="\"")
View(benchmarkSizes)
benchmarkSizes <- read.table("~/code/stencil/measures/benchmarkSizes.log", sep=";", quote="\"")
View(benchmarkSizes)
cilk_bench <- benchmarkSizes[benchmarkSizes$V1 == 'cilk',]
View(cilk_bench)
cxx_bench <- benchmarkSizes[benchmarkSizes$V1 == 'cxx',]
omp_bench <- benchmarkSizes[benchmarkSizes$V1 == 'omp',]
plot <- ggplot(cilk_bench)
plot + stat_smooth(aes(x=V4, y=V6, color=V2)) + facet_grid(V3 ~V5 )
plot <- ggplot(cxx_bench)
plot + stat_smooth(aes(x=V4, y=V6, color=V2)) + facet_grid(V3 ~V5 )
plot <- ggplot(omp_bench)
plot + stat_smooth(aes(x=V4, y=V6, color=V2)) + facet_grid(V3 ~V5 )
plot + stat_smooth(aes(x=V5, y=V6, color=V2)) + facet_grid(V3 ~V4 )
plot + stat_smooth(aes(x=V5, y=V6, color=V2)) + facet_grid(V4 ~V3 )
plot + stat_smooth(aes(x=V5, y=V6, color=V2, method='ln')) + facet_grid(V4 ~V3 ) +
plot + stat_smooth(aes(x=V5, y=V6, color=V2, method='ln')) + facet_grid(V4 ~V3 )
plot + stat_smooth(aes(x=V5, y=V6, color=V2, method='lm')) + facet_grid(V4 ~V3 )
plot + stat_smooth(aes(x=V5, y=V6, color=V2), method='lm') + facet_grid(V4 ~V3 )
benchmarkSizes <- read.table("~/code/stencil/measures/benchmarkSizes.log", sep=";", quote="\"")
View(benchmarkSizes)
cilk_bench <- benchmarkSizes[benchmarkSizes$V1 == 'cilk',]
cxx_bench <- benchmarkSizes[benchmarkSizes$V1 == 'cxx',]
omp_bench <- benchmarkSizes[benchmarkSizes$V1 == 'omp',]
plot <- ggplot(cilk_bench)
plot + stat_smooth(aes(x=V5, y=V6, color=V2), method='lm') + facet_grid(V4 ~V3 )
plot <- ggplot(omp_bench)
plot + stat_smooth(aes(x=V5, y=V6, color=V2), method='lm') + facet_grid(V4 ~V3 )
plot + stat_smooth(aes(x=V5, y=V6, color=V2)) + facet_grid(V4 ~V3 )
cilk_bench_100 <- cilk_bench[cilk_bench$V3 == 100,]
plot <- ggplot(cilk_bench_100)
plot + stat_smooth(aes(x=V5, y=V6, color=V2)) + facet_grid(V4 ~V3 )
