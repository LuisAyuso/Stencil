plot_measure(skogafoss_blur9_noCut_benchmark, "time")
`3D_benchmark` <- read.csv("~/code/stencil/gcc-release/3D_benchmark", sep=";")
View(`3D_benchmark`)
library("ggplot2", lib.loc="/usr/lib64/R/library")
library("ggplot2", lib.loc="/usr/lib64/R/library")
source('.//plot_counters.R')
plot_measure(3D_benchmark, "exec_time")
clear
clear(3D_benchmark)
benchmark <- read.csv("~/code/stencil/gcc-release/3D_benchmark", sep=";")
View(benchmark)
library("ggplot2", lib.loc="/usr/lib64/R/library")
library("ggplot2", lib.loc="/usr/lib64/R/library")
source("./plot_counters.R")
plot_measure(benchmark, "exec_time")
plot_measure(benchmark, "exec_time")
source("./plot_counters.R")
plot_measure(benchmark, "exec_time")
plot <- ggplot(newdata)
plot <- ggplot(benchmark)
View(benchmark)
plot + geom_boxplot(aes(x=algorithm, y=exec_time))
plot + geom_boxplot(aes(x=algorithm, y=exec_time)) + facet_grid( input_size ~ )
plot + geom_boxplot(aes(x=algorithm, y=exec_time)) + facet_grid( input_size ~ num_cores)
source("./plot_counters.R")
plot_input_size_vs_cores(benchmark, "exec_time")
source("./plot_counters.R")
plot_input_size_vs_cores(benchmark, "exec_time")
source("./plot_counters.R")
plot_input_size_vs_cores(benchmark, "exec_time")
plot_input_size_vs_cores(benchmark, "exec_time")
source("./plot_counters.R")
plot_input_size_vs_cores(benchmark, "exec_time")
plot_input_size_vs_cores(benchmark, "exec_time")
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
plot_input_size_vs_cores(o4_benchmark, "exec_time")
plot_input_size_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
View(`o4_benchmark`)
plot_input_size_vs_cores(o4_benchmark, "exec.time")
View(`o4_benchmark`)
source("./plot_counters.R")
plot_input_size_vs_cores(o4_benchmark, "exec.time")
o4_only_10 <- o4_benchmark[o4_benchmark$input.size>10]
o4_only_10 <- o4_benchmark[o4_benchmark[input.size]>10]
o4_only_10 <- o4_benchmark[o4_benchmark["input.size"]>10]
plot_input_size_vs_cores(o4_only_10, "exec.time")
o4_only_10 <- o4_benchmark[o4_benchmark["input.size"]==10]
o4_only_10 <- o4_benchmark["input.size"]==10
View(`o4_only_10`)
o4_only_10 <- o4_benchmark[o4_benchmark["input.size"]==10, ]
View(`o4_only_10`)
plot_input_size_vs_cores(o4_only_10, "exec.time")
o4_only_100 <- o4_benchmark[o4_benchmark["input.size"]==100, ]
plot_input_size_vs_cores(o4_only_100, "exec.time")
o4_only_200 <- o4_benchmark[o4_benchmark["input.size"]==200, ]
plot_input_size_vs_cores(o4_only_200, "exec.time")
View(`o4_only_200`)
o4_only_150 <- o4_benchmark[o4_benchmark["input.size"]==150, ]
plot_input_size_vs_cores(o4_only_150, "exec.time")
plot_input_size_vs_cores(o4_only_100, "exec.time")
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
plot_input_size_vs_cores(o4_benchmark, "exec.time")
o4_only_200 <- o4_benchmark[o4_benchmark["input.size"]==200, ]
plot_input_size_vs_cores(o4_only_200, "exec.time")
o4_only_200_noIT = o4_only_200[o4_only_200$algorithm != 'it', ]
View(sixteen_benchmark)
View(`o4_only_200_noIT`)
View(`o4_only_200_noIT`)
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
means <- aggregate(exec.time ~ algorithm, o4_only_200_noIT, mean)
View(means)
plot <- ggplot(o4_only_200_noIT)
plot + geom_boxplot(aes_string(x="algorithm", y=measure)) + facet_grid( input.size ~ num.cores)
plot + geom_boxplot(aes_string(x="algorithm", y="exec.time:)) + facet_grid( input.size ~ num.cores)
plot + geom_boxplot(aes_string(x="algorithm", y="exec.time")) + facet_grid( input.size ~ num.cores)
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores)
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data = aggregate(exec.time ~ algorithm, o4_only_200_noIT, mean),  aes(label = exec.time, y = 10))
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data = aggregate(exec.time ~ algorithm, o4_only_200_noIT, mean),  aes(label = exec.time, x = algorithm, y = 10))
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data =
library("dplyr", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")
tmp <- ddply(dt,~algorithm,summarise,mean=mean(exec.time),sd=sd(exec.time))
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.1")
detach("package:stats", unload=TRUE)
library("stats", lib.loc="/usr/lib64/R/library")
detach("package:stats", unload=TRUE)
library(plyr)
dplyr()
?Startup
ddply(o4_only_200_noIT,~algorithm,summarise,mean=mean(exec.time))
ddply(o4_only_200_noIT,~cores,summarise,mean=mean(exec.time))
View(`o4_only_200_noIT`)
ddply(o4_only_200_noIT,~num.cores,summarise,mean=mean(exec.time))
ddply(o4_only_200_noIT,algorithm~num.cores,summarise,mean=mean(exec.time))
mean <- ddply(o4_only_200_noIT,algorithm~num.cores,summarise,mean=mean(exec.time))
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data = mean,  aes(label = exec.time, y = 10))
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data = mean,  aes(label = mean, y = 10))
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data = mean,  aes(label = mean, x = num.cores, y = 10))
plot + geom_boxplot(aes(x=algorithm, y=exec.time)) + facet_grid( input.size ~ num.cores) + geom_text(data = mean,  aes(label = mean, x = algorithm, y = 10))
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT)
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
colnames(o4_benchmark)
colnames(o4_benchmark)["exec.time"]
get(colnames(o4_benchmark)["exec.time"])
colnames(o4_benchmark)[2]
str <-
"exec.time"
o4_benchmark[str]
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")\
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_benchmark, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_benchmark, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_benchmark, "exec.time")
o4_only_200 <- o4_benchmark[o4_benchmark["input.size"]==200, ]
o4_only_200_noIT = o4_only_200[o4_only_200$algorithm != 'it', ]
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
plot_input_size_vs_cores(o4_only_200_noIT, "context.switches")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "context.switches")
plot_input_size_vs_cores(o4_only_200_noIT, "page.faults")
plot_input_size_vs_cores(o4_only_200_noIT, "stalled.cycles.frontend")
plot_input_size_vs_cores(o4_only_200_noIT, "branch.misses")
plot_input_size_vs_cores(o4_only_200_noIT, "task.clock")
plot_input_size_vs_cores(o4_only_200_noIT, "stalled.cycles.backend")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
source("./plot_counters.R")
plot_input_size_vs_cores(o4_only_200_noIT, "exec.time")
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";", quote="")
View(`o4_benchmark`)
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
plot_input_size_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
o4_benchmark <- o4_benchmark[o4_benchmark$input.size == 100,]
View(`o4_benchmark`)
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
plot_time_steps_vs_cores(o4_benchmark, "cache.misses")
plot_time_steps_vs_cores(o4_benchmark, "cpu.cycles
")
plot_time_steps_vs_cores(o4_benchmark, "branch.misses")
plot_time_steps_vs_cores(o4_benchmark, "stalled.cycles.frontend")
plot_time_steps_vs_cores(o4_benchmark, "stalled.cycles.backend")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
View(`o4_benchmark`)
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_benchmark, "exec.time")
View(`o4_benchmark`)
`o4_benchmark` <- read.csv("/tmp/o4_benchmark", sep=";")
View(`o4_benchmark`)
o4_only_size_100 <- o4_benchmark[o4_benchmark$input.size == 100, ]
o4_only_size_150 <- o4_benchmark[o4_benchmark$input.size == 150, ]
o4_only_size_200 <- o4_benchmark[o4_benchmark$input.size == 200, ]
source("./plot_counters.R")
plot_time_steps_vs_cores(o4_only_size_100, "exec.time")
plot_time_steps_vs_cores(o4_only_size_150, "exec.time")
plot_time_steps_vs_cores(o4_only_size_200, "exec.time")
o4_only_time_50 <- o4_benchmark[o4_benchmark$time.steps == 50, ]
o4_only_time_100 <- o4_benchmark[o4_benchmark$time.steps == 100, ]
o4_only_time_150 <- o4_benchmark[o4_benchmark$time.steps == 150, ]
plot_input_size_vs_cores( o4_only_time_50, "exec.time")
plot_input_size_vs_cores( o4_only_time_100, "exec.time")
plot_input_size_vs_cores( o4_only_time_150, "exec.time")
plot_input_size_vs_cores( o4_only_time_150, "cache.misses")
icc_s100_t150 <- read.csv("~/code/stencil/icc_s100_t150", sep=";")
View(icc_s100_t150)
source("./plot_counters.R")
plot_algorithm_vs_cores(icc_s100_t150, "exec.time")
icc_s100_t150_no_it <- icc_s100_t150[icc_s100_t150$algorith != "it", ]
plot_algorithm_vs_cores(icc_s100_t150_no_it, "exec.time")
icc_s100_t150_2 <- read.csv("~/code/stencil/icc_s100_t150_2", sep=";")
View(icc_s100_t150_2)
icc_s100_t150_no_it <- icc_s100_t150_2[icc_s100_t150_2$algorith != "it", ]
plot_algorithm_vs_cores(icc_s100_t150_no_it_2, "exec.time")
plot_algorithm_vs_cores(icc_s100_t150_no_it, "exec.time")
source("./plot_counters.R")
icc_s100_t150 <- read.csv("~/code/stencil/icc_s100_t150", sep=";")
View(icc_s100_t150)
plot_algorithm_vs_cores(icc_s100_t150, "cache.misses")
plot_algorithm_vs_cores(icc_s100_t150, "exec.time")
a <- icc_s100_t150[icc_s100_t150$algorithm != 'it', ]
plot_algorithm_vs_cores(a, "exec.time")
gcc5_100_150 <- read.csv("~/code/stencil/gcc5_100_150", sep=";")
View(gcc5_100_150)
plot_algorithm_vs_cores(gcc5_100_150, "exec.time")
plot_algorithm_vs_cores(gcc5_100_150, "cache.misses")
gcc5_100_150 <- read.csv("~/code/stencil/gcc5_100_150", sep=";")
View(gcc5_100_150)
plot_algorithm_vs_cores(gcc5_100_150, "exec.time")
gcc5_rec_vs_inv <- gcc5_100_150[gcc5_100_150$algorithm != it,]
gcc5_rec_vs_inv <- gcc5_100_150[gcc5_100_150$algorithm != "it",]
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "cache.misses")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "stalled.cycles.frontend")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "stalled.cycles.backend")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "instructions")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
ddply(gcc5_rec_vs_inv,algorithm~num.cores,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
ddply(gcc5_rec_vs_inv,algorithm,num.cores,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
ddply(gcc5_rec_vs_inv,algorithm~num.cores~Kind,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
ddply(gcc5_rec_vs_inv,algorithm~num.cores~Kind,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
tmp <- ddply(gcc5_rec_vs_inv,algorithm~num.cores~Kind,summarise, exec.time.mean=mean(exec.time), sd=sd(exec.time))
tmp2 <-gcc5_100_150
tmp2 <-gcc5_rec_vs_inv
total <- merge(tmp, tmp2)
total
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot <- ggplot(total)
plot + geom_boxplot(aes_string(x="Kind", y=measure, fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x = algorithm, y = 10 ))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x = algorithm, y = 10 ))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x=Kind))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x=Kind, y=100))
plot + geom_boxplot(aes_string(x="Kind", y="exec.time", fill="Kind")) + facet_grid( algorithm ~ num.cores) + geom_text(aes(label = exec.time.mean, x=Kind, y=10))
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
my_func(total, "omp", "cilk", 2, 1234)
test(total)
source("./plot_counters.R")
my_func(total, "omp", "cilk", 2, 1234)
total[total$Kind = 'omp']
total[total$Kind == 'omp']
View(total)
total[total$Kind == 'omp',]
source("./plot_counters.R")
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
source("./plot_counters.R")
dumm <- my_func(total, "omp", "cilk", 2, 1234)
dumm <- my_func(total, kind="omp", alg="cilk", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="cilk", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="cilk", numthreads = 2, exectime = 1234)
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
dumm <- my_func(total, kind="omp", alg="rec", numthreads = 2, exectime = 1234)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
ddply?
ddply
?ddply
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
ddply(my_dataframe, Kind~algorithm~num.cores, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time), my_dataframe)
ddply(my_dataframe, Kind~algorithm~num.cores, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time), total)
ddply(my_dataframe, Kind~algorithm~num.cores, .fun = estimate,  Kind, algorithm, num.cores, exec.time, total)
ddply(total, Kind~algorithm~num.cores, .fun = estimate,  Kind, algorithm, num.cores, exec.time, total)
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time df=my_dataframe) ) )
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time df=total) ) )
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) ) )
ddply(my_dataframe, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
source("./plot_counters.R")
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
source("./plot_counters.R")
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
test(total)
ddply(total, Kind~algorithm~num.cores, summarise, expected=estimate(kind=Kind, alg=algorithm, numthreads=num.cores, exectime=exec.time, df=total) )
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
clear(a)
clean(a)
remove(a)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
test(total)
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
sumarize_times(total)
sumarize_times(gcc5_100_150)
global_df
source("./plot_counters.R")
source("./plot_counters.R")
sumarize_times(gcc5_rec_vs_inv)
source("./plot_counters.R")
sumarize_times(gcc5_rec_vs_inv)
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
total <- sumarize_times(gcc5_rec_vs_inv)
plot <- ggplot(total)
plot +  geom_dotplot(aes(x=exec.time, y=num.cores))
total
plot +  geom_dotplot(aes(x=exec.time.mean, y=num.cores))
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ num.cores)
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ )
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ kind)
plot +  geom_dotplot(aes(x=num.cores, y=exec.time.mean)) +  facet_grid( algorithm ~ num.cores)
total <- sumarize_times(gcc5_rec_vs_inv)
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
source("./plot_counters.R")
plot_algorithm_vs_cores(gcc5_rec_vs_inv, "exec.time")
